buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.5"
    }
}

apply plugin: "io.qameta.allure"

allure {
    version = '2.2.1'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.7.0'
}

apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    agent
}

dependencies {
    compile 'org.testng:testng:7.0.0-beta1'
    compile 'org.seleniumhq.selenium:selenium-java:3.14.0'
    compile 'org.hamcrest:java-hamcrest:2.0.0.0'
    compile 'commons-net:commons-net:3.6'
    compile 'org.subethamail:subethasmtp:3.1.7'
    compile 'ru.lanwen.verbalregex:java-verbal-expressions:1.6'
    compile 'mysql:mysql-connector-java:8.0.13'
    compile 'org.hibernate:hibernate-core:5.3.7.Final'
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'biz.futureware.mantis:mantis-axis-soap-client:1.2.19'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.thoughtworks.xstream:xstream:1.4.11.1'

// https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'

// https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-core
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'

// https://mvnrepository.com/artifact/javax.activation/activation
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'

    agent "org.aspectj:aspectjweaver:1.8.0"
    compile "ru.yandex.qatools.allure:allure-testng-adaptor:1.4.0.RC4"

    compile 'org.robotframework:robotframework:3.0.4'
}

task testGroups (type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-Groups.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
}

testGroups.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

task testContacts (type: Test) {
    useTestNG {
        suites 'src/test/resources/testng-Contacts.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
}

test {
    useTestNG()
}

task rf(type: JavaExec) {
    main = 'org.robotframework.RobotFramework'
    classpath = sourceSets.test.runtimeClasspath
    args '--outputdir', 'build/rf-report'
    args 'src/test/resources/rf'
}